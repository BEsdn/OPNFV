---

- hosts: localhost
  tasks:
    - include: clean_all.yml
    - name: create VLAN network and subnet
      shell: 
        source {{ inventory_dir }}/openstack.creds;
        export net_name={{ prefix }}_$RANDOM;
        export net2_name={{ prefix }}_$RANDOM;
        export sub_name={{ prefix }}_$RANDOM;
        export sub2_name={{ prefix }}_$RANDOM;
        export vm1_name={{ prefix }}_$RANDOM;
        export vm2_name={{ prefix }}_$RANDOM;
        echo $vm1_name;
        echo $vm2_name;
        export port1_name={{ prefix }}_$RANDOM;
        export port2_name={{ prefix }}_$RANDOM;
        export port3_name={{ prefix }}_$RANDOM;
        export port4_name={{ prefix }}_$RANDOM;
        export port5_name={{ prefix }}_$RANDOM;
        export port6_name={{ prefix }}_$RANDOM;
        nfvt={{ prefix }}_$RANDOM;
        openstack {{ openstack_opts }} keypair create --public-key ./ssh/id_rsa.pub $nfvt;
        if [[ "x{{ ipversion }}" = "xIPV4" ]]; then
            openstack {{ openstack_opts }} network create --share --provider-physical-network {{ physnet_vlan }} --provider-network-type vlan --provider-segment {{ vlan_seg_ids[0] }} $net_name;
            openstack {{ openstack_opts }} subnet create --network $net_name  --allocation-pool start=10.1.2.2,end=10.1.2.99 --gateway none --subnet-range 10.1.2.0/24 $sub_name;
            openstack {{ openstack_opts }} network create --share --provider-physical-network {{ physnet_vlan }} --provider-network-type vlan --provider-segment {{ vlan_seg_ids[1] }} $net2_name;
            openstack {{ openstack_opts }} subnet create --network $net2_name  --allocation-pool start=10.1.3.2,end=10.1.3.99 --gateway none --subnet-range 10.1.3.0/244 $sub2_name;
            echo 'create port --------------------------';            
            openstack {{ openstack_opts }} port create --network $net_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub_name,ip-address=10.1.2.2 $port1_name;
            openstack {{ openstack_opts }} port create --network $net2_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub2_name,ip-address=10.1.3.2 $port2_name;             
            openstack {{ openstack_opts }} port create --network $net_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub_name,ip-address=10.1.2.3 $port3_name;
            openstack {{ openstack_opts }} port create --network $net2_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub2_name,ip-address=10.1.3.3 $port4_name;
            openstack {{ openstack_opts }} port create --network {{ _external_network_ }} --vnic-type direct --host {{ host_for_sirov1 }} $port5_name;
            openstack {{ openstack_opts }} port create --network {{ _external_network_ }} --vnic-type direct --host {{ host_for_sirov1 }} $port6_name;
            port1=`openstack {{ openstack_opts }} port list | grep $port1_name | awk -F '|' '{print $2}' | xargs`; 
            port2=`openstack {{ openstack_opts }} port list | grep $port2_name | awk -F '|' '{print $2}' | xargs`;
            port3=`openstack {{ openstack_opts }} port list | grep $port3_name | awk -F '|' '{print $2}' | xargs`; 
            port4=`openstack {{ openstack_opts }} port list | grep $port4_name | awk -F '|' '{print $2}' | xargs`;
            openstack {{ openstack_opts }} server create --flavor {{ _flavor_ }} --image {{ _image_ }} --nic port-id=$port1_name --nic port-id=$port5_name --key-name $nfvt --config-drive True $vm1_name --availability-zone {{ az_cinder }}:{{ host_for_sirov1 }};
            openstack {{ openstack_opts }} server create --flavor {{ _flavor_ }} --image {{ _image_ }} --nic port-id=$port2_name --nic port-id=$port6_name --key-name $nfvt --config-drive True $vm1_name --availability-zone {{ az_cinder }}:{{ host_for_sirov1 }};
            sleep 60;
            openstack {{ openstack_opts }} server show $vm1_name | grep ACTIVE;
            openstack {{ openstack_opts }} server show $vm2_name | grep ACTIVE;
            echo $port1;
            echo $port2;
            echo $port3;
            echo $port4;
            openstack {{ openstack_opts }} server list | grep $vm1_name | grep -E -o "\<{{ _external_network_ }}=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\>" | awk -F '=' '{print $2}'xargs;
            openstack {{ openstack_opts }} server list | grep $vm2_name | grep -E -o "\<{{ _external_network_ }}=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\>" | awk -F '=' '{print $2}'xargs;        
            openstack {{ openstack_opts }} server list | grep $vm1_name | grep -E -o "\<$net_name=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\>" | awk -F '=' '{print $2}'xargs;
            openstack {{ openstack_opts }} server list | grep $vm2_name | grep -E -o "\<$net_name=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\>" | awk -F '=' '{print $2}'xargs;
        else
            openstack {{ openstack_opts }} network create --share --provider-physical-network {{ physnet_vlan }} --provider-network-type vlan --provider-segment {{ vlan_seg_ids[0] }} $net_name;
            openstack {{ openstack_opts }} subnet create --network $net_name --allocation-pool start=5555:5555::2,end=5555:5555::10 --gateway none --subnet-range 5555:5555::/64 $sub_name --ip-version 6 --ipv6-ra-mode dhcpv6-stateful --ipv6-address-mode dhcpv6-stateful;
            openstack {{ openstack_opts }} network create --share --provider-physical-network {{ physnet_vlan }} --provider-network-type vlan --provider-segment {{ vlan_seg_ids[1] }} $net2_name;
            openstack {{ openstack_opts }} subnet create --network $net2_name --allocation-pool start=5555:5556::2,end=5555:5556::10 --gateway none --subnet-range 5555:5556::/64 $sub2_name --ip-version 6 --ipv6-ra-mode dhcpv6-stateful --ipv6-address-mode dhcpv6-stateful;
            echo 'create port --------------------------';
            openstack {{ openstack_opts }} port create --network $net_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub_name,ip-address=5555:5555::5 $port1_name;
            openstack {{ openstack_opts }} port create --network $net2_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub2_name,ip-address=5555:5556::5 $port2_name;             
            openstack {{ openstack_opts }} port create --network $net_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub_name,ip-address=5555:5555::6 $port3_name;
            openstack {{ openstack_opts }} port create --network $net2_name --vnic-type direct --host {{ host_for_sirov1 }} --fixed-ip subnet=$sub2_name,ip-address=5555:5556::6 $port4_name;
            openstack {{ openstack_opts }} port create --network {{ _external_network_ }} --vnic-type direct --host {{ host_for_sirov1 }} $port5_name;
            openstack {{ openstack_opts }} port create --network {{ _external_network_ }} --vnic-type direct --host {{ host_for_sirov1 }} $port6_name;
            port1=`openstack {{ openstack_opts }} port list | grep $port1_name | awk -F '|' '{print $2}' | xargs`; 
            port2=`openstack {{ openstack_opts }} port list | grep $port2_name | awk -F '|' '{print $2}' | xargs`;
            port3=`openstack {{ openstack_opts }} port list | grep $port3_name | awk -F '|' '{print $2}' | xargs`; 
            port4=`openstack {{ openstack_opts }} port list | grep $port4_name | awk -F '|' '{print $2}' | xargs`;
            port5=`openstack {{ openstack_opts }} port list | grep $port5_name | awk -F '|' '{print $2}' | xargs`;
            port6=`openstack {{ openstack_opts }} port list | grep $port6_name | awk -F '|' '{print $2}' | xargs`;
            openstack {{ openstack_opts }} server create --flavor {{ _flavor_ }} --image {{ _image_ }} --nic port-id=$port1 --nic port-id=$port5 --key-name $nfvt $vm1_name --availability-zone {{ az_cinder }}:{{ host_for_sirov1 }} --config-drive True --user-data user_data.sh;
            openstack {{ openstack_opts }} server create --flavor {{ _flavor_ }} --image {{ _image_ }} --nic port-id=$port3 --nic port-id=$port6 --key-name $nfvt $vm2_name --availability-zone {{ az_cinder }}:{{ host_for_sirov1 }} --config-drive True --user-data user_data.sh;
            sleep 90;
            openstack {{ openstack_opts }} server show $vm1_name | grep ACTIVE;
            openstack {{ openstack_opts }} server show $vm2_name | grep ACTIVE;
            echo $port1;
            echo $port2;
            echo $port3;
            echo $port4;
            openstack {{ openstack_opts }} server list | grep $vm1_name | grep -E -o "\<{{ _external_network_ }}={{ regex }}\>" | awk -F '=' '{print $2}'xargs;
            openstack {{ openstack_opts }} server list | grep $vm2_name | grep -E -o "\<{{ _external_network_ }}={{ regex }}\>" | awk -F '=' '{print $2}'xargs;        
        fi;
      args:
        executable: /bin/bash
      register: o_vlan
    - debug: var=o_vlan.stdout_lines

    - name: show info of VM1
      shell:
        sleep 30;
        source {{ inventory_dir }}/openstack.creds;
        echo ------------------------------------------ show info of VM1 ------------------------------------------;
        ssh -i {{ inventory_dir }}/ssh/id_rsa -F {{ inventory_dir }}/ssh/ssh_config root@{{ o_vlan.stdout_lines[-2] }} \
        'ifconfig' ;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

    - name: show info of VM2
      shell:
        sleep 30;
        echo ------------------------------------------ show info of VM2 ------------------------------------------;
        ssh -i {{ inventory_dir }}/ssh/id_rsa -F {{ inventory_dir }}/ssh/ssh_config root@{{ o_vlan.stdout_lines[-1] }} \
        'ifconfig' ;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

    - name: add port for VM1 VM2
      shell:
        source {{ inventory_dir }}/openstack.creds;
        openstack {{ openstack_opts }} server add port {{ o_vlan.stdout_lines[0] }} {{ o_vlan.stdout_lines[-5] }};
        openstack {{ openstack_opts }} server add port {{ o_vlan.stdout_lines[1] }} {{ o_vlan.stdout_lines[-3] }};
        sleep 30;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

    - name: show port for VM1
      shell:
        sleep 30;
        source {{ inventory_dir }}/openstack.creds;
        echo ---------------------------- show info of VM1 -----------------------------------;
        ssh -i {{ inventory_dir }}/ssh/id_rsa -F {{ inventory_dir }}/ssh/ssh_config root@{{ o_vlan.stdout_lines[-2] }} \
        'ifconfig' ;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines
    - debug: var=cmd.stderr_lines

    - name: show port for VM2
      shell:
        sleep 30;
        echo ---------------------------- show info of VM2 -----------------------------------;
        ssh -i {{ inventory_dir }}/ssh/id_rsa -F {{ inventory_dir }}/ssh/ssh_config root@{{ o_vlan.stdout_lines[-1] }} \
        'ifconfig ens7 mtu 5000; ifconfig' ;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines
    - debug: var=cmd.stderr_lines

    - name: delete port for VM1 VM2
      shell:
        source {{ inventory_dir }}/openstack.creds;
        openstack {{ openstack_opts }} server remove port {{ o_vlan.stdout_lines[0] }} {{ o_vlan.stdout_lines[-6] }};
        openstack {{ openstack_opts }} server remove port {{ o_vlan.stdout_lines[1] }} {{ o_vlan.stdout_lines[-4] }};
        sleep 30;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

    - name: show port of VM1 
      shell:
        sleep 30;
        echo ---------------------------- show info of VM1 -----------------------------------;
        ssh -i {{ inventory_dir }}/ssh/id_rsa -F {{ inventory_dir }}/ssh/ssh_config root@{{ o_vlan.stdout_lines[-2] }} \
        'ifconfig' ;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

    - name: show port of VM2
      shell:
        sleep 30;
        echo ---------------------------- show info of VM2 -----------------------------------;
        ssh -i {{ inventory_dir }}/ssh/id_rsa -F {{ inventory_dir }}/ssh/ssh_config root@{{ o_vlan.stdout_lines[-1] }} \
        'ifconfig' ;
      args:
        executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines
