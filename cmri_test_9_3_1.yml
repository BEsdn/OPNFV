---

- hosts: localhost
  tasks:
    - include: clean_all.yml
    - name: create networks
      shell:
        source {{ inventory_dir }}/openstack.creds;
        export net1_name={{ prefix }}_$RANDOM;
        echo $net1_name;
        openstack {{ openstack_opts }} network create --share --provider-physical-network {{ physnet }} --provider-network-type vlan --provider-segment {{ vlan_seg_ids[2] }} $net1_name;
      args:
        executable: /bin/bash
      register: o_create_net
    - debug: var=o_create_net.stdout_lines

    - name: create subnets
      shell:
        sleep 5;
        source {{ inventory_dir }}/openstack.creds;
        export sub1_name={{ prefix }}_$RANDOM;
        echo $sub1_name;
        openstack {{ openstack_opts }} subnet create --network '{{ o_create_net.stdout_lines[0] }}' --allocation-pool start=10.1.1.2,end=10.1.1.99 \
        --gateway 10.1.1.1 --subnet-range 10.1.1.0/24 $sub1_name;
        openstack {{ openstack_opts }} subnet show $sub1_name;
      args:
        executable: /bin/bash
      register: o_create_sub
    - debug: var=o_create_sub.stdout_lines

    - name: create VM
      shell:
        source {{ inventory_dir }}/openstack.creds;
        export vm1_name={{ prefix }}_$RANDOM;
        echo $vm1_name;
        openstack {{ openstack_opts }} server create --flavor {{ _flavor_ }} --image {{ _image_ }} \
        --nic net-id={{ o_create_net.stdout_lines[0] }},v4-fixed-ip=10.1.1.2  --security-group {{ _security_group_ }} --key {{ _key_pair_ }} --availability-zone {{ az_cinder }}:{{ dedicated_compute }} $vm1_name;
        sleep 90;
        openstack {{ openstack_opts }} server show  $vm1_name | grep ACTIVE;
      args:
          executable: /bin/bash
      register: o_create_vm
    - debug: var=o_create_vm.stdout_lines

    # - name: create and config router
    #   shell:
    #     source {{ inventory_dir }}/openstack.creds;
    #     export router_name={{ prefix }}_$RANDOM;
    #     echo $router_name;
    #     openstack {{ openstack_opts }} router create $router_name;
    #     openstack {{ openstack_opts }} router set $router_name --external-gateway {{ _external_network_ }};
    #     openstack {{ openstack_opts }} router add subnet $router_name {{ o_create_sub.stdout_lines[0] }};
    #     openstack {{ openstack_opts }} router show $router_name;
    #   args:
    #     executable: /bin/bash
    #   register: o_create_router
    # - debug: var=o_create_router.stdout_lines

    # - name: get VM IP
    #   shell:
    #     sleep 60;
    #     source {{ inventory_dir }}/openstack.creds;
    #     openstack {{ openstack_opts }} server show {{ o_create_vm.stdout_lines[0] }} | grep address | awk -F '|' '{print $3}' | awk -F "=" '{print $2}' | xargs;
    #   args:
    #     executable: /bin/bash
    #   register: o_vm_ip
    # - debug: var=o_vm_ip.stdout_lines

    # - name: floating ip association for VM1
    #   shell:
    #     sleep 30;
    #     source {{ inventory_dir }}/openstack.creds;
    #     export subnet_id=`openstack {{ openstack_opts }} subnet show {{ o_create_sub.stdout_lines[0] }} | grep ' id ' | awk -F'|' '{print $3}'`;
    #     export port_id=`openstack {{ openstack_opts }} port list | grep $subnet_id |  grep {{ o_vm_ip.stdout_lines[0] }} | awk -F'|' '{print $2}' | xargs`;
    #     openstack {{ openstack_opts }} floating ip create --port $port_id {{ _external_network_ }} | grep 'floating_ip_address' | awk -F'|' '{print $3}' | xargs;
    #     sleep 10;
    #   args:
    #     executable: /bin/bash
    #   register: o_create_fip1
    # - debug: var=o_create_fip1.stdout_lines

- hosts: controller
  tasks:
    - name: attack rabbitmq
      shell:
        echo '-------------------------------attack rabbitmq---------------------------------';
        export rabbitmq_pid=`ps -elf | grep rabbitmq | tail -1| awk '{print $4}'`;
        echo "the rabbitmq_pid is $rabbitmq_pid";
        sudo kill -9 $rabbitmq_pid;
      args:
          executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

- hosts: localhost
  tasks:
    - name: show the info of vm
      shell:
        source {{ inventory_dir }}/openstack.creds;
        openstack {{ openstack_opts }} server show {{ hostvars['localhost']['o_create_vm'].stdout_lines[0] }};
      args:
          executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines

- hosts: controller
  tasks:
    - name: rabbitmq_pid recording
      shell:
        echo '-------------------------------rabbitmq_pid---------------------------------';
        export rabbitmq_pid=`ps -elf | grep rabbitmq | tail -1| awk '{print $4}'`;
        echo "the new rabbitmq_pid is $rabbitmq_pid";
      args:
          executable: /bin/bash
      register: cmd
    - debug: var=cmd.stdout_lines